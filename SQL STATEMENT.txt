CREATE TABLE TEACHER (
    TEACHER_ID VARCHAR(25) NOT NULL UNIQUE,
    TEACHER_NAME VARCHAR(200) NOT NULL,
    TEACHER_PASSWORD VARCHAR(25) NOT NULL,
    TEACHER_GENDER VARCHAR(10) NOT NULL,
    TEACHER_PHONENUM VARCHAR(12) NOT NULL,
    
    PRIMARY KEY (TEACHER_ID)
);

CREATE TABLE ADMIN (
    SPBT_ID VARCHAR(25) NOT NULL UNIQUE,
    ADMIN_NAME VARCHAR(200) NOT NULL,
    ADMIN_PASSWORD VARCHAR(25) NOT NULL,
    ADMIN_GENDER VARCHAR(10) NOT NULL,
    ADMIN_PHONENUM VARCHAR(12) NOT NULL,
    ROLE VARCHAR(1) NOT NULL,
    
    PRIMARY KEY (SPBT_ID)
);

CREATE TABLE CLASS (
    CLASS_ID VARCHAR(25) NOT NULL UNIQUE,
    CLASS_NAME VARCHAR(50) NOT NULL,
    TOTALSTUDENTS INT NOT NULL,
    TEACHER_ID VARCHAR(25) NOT NULL,
    SPBT_ID VARCHAR(25) NOT NULL,
    
    PRIMARY KEY (CLASS_ID),
    FOREIGN KEY (TEACHER_ID) REFERENCES teacher(TEACHER_ID),
    FOREIGN KEY (SPBT_ID) REFERENCES admin(SPBT_ID)
);

CREATE TABLE STUDENT (
    NRIC VARCHAR(12) NOT NULL UNIQUE,
    STUDENT_NAME VARCHAR(200) NOT NULL,
    DOB DATE NOT NULL,
    STUDENT_PASSWORD VARCHAR(25) NOT NULL,
    YEAR_STARTSCHOOL VARCHAR(4) NOT NULL,
    STUDENT_PHONENUM VARCHAR(12) NOT NULL,
    GENDER VARCHAR(10) NOT NULL,
    
    PRIMARY KEY (NRIC)
);

CREATE TABLE TEXTBOOK (
    TEXTBOOK_ID VARCHAR(25) NOT NULL UNIQUE,
    TEXTBOOK_NAME VARCHAR(100) NOT NULL UNIQUE,
    YEARPUBLISH YEAR,
    PUBLISHER VARCHAR(100),
    STOCK INT NOT NULL,
    PRICE DOUBLE NOT NULL,
    AMOUNTLOST DOUBLE,
    YEAR_FORM VARCHAR(2) NOT NULL,
    SPBT_ID VARCHAR(25) NOT NULL,
    
    PRIMARY KEY (TEXTBOOK_ID),
    FOREIGN KEY (SPBT_ID) REFERENCES ADMIN(SPBT_ID)
);
    
CREATE TABLE RETURNGET (
    RETURNGET_ID VARCHAR(25) NOT NULL UNIQUE,
    DATE_RETURN DATE NOT NULL,
    DATE_GET DATE NOT NULL, 
    STATUS_GET INT NOT NULL,
    STATUS_RETURN INT NOT NULL,
    TEXTBOOK_ID VARCHAR(25) NOT NULL,
    NRIC VARCHAR(12) NOT NULL,
    
    PRIMARY KEY (RETURNGET_ID),
    FOREIGN KEY (TEXTBOOK_ID) REFERENCES TEXTBOOK(TEXTBOOK_ID),
    FOREIGN KEY (NRIC) REFERENCES STUDENT(NRIC)
);

CREATE TABLE PENALTY(
    RECEIPT_ID INT NOT NULL UNIQUE AUTO_INCREMENT,
    TOTAL_PENALTY DOUBLE NOT NULL,
    DATE_PENALTY TIMESTAMP NOT NULL,
    RETURNGET_ID VARCHAR(25) NOT NULL,
    
    PRIMARY KEY(RECEIPT_ID),
    FOREIGN KEY(RETURNGET_ID) REFERENCES RETURNGET(RETURNGET_ID)
);

CREATE TABLE STUDENT_CLASS(
    NRIC VARCHAR(12) NOT NULL,
    CLASS_ID VARCHAR(25) NOT NULL,
    YEAR YEAR,
    
    FOREIGN KEY (NRIC) REFERENCES STUDENT(NRIC),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASS(CLASS_ID)
    
);

CREATE OR REPLACE DEFINER=`root`@`localhost` TRIGGER decrement_textbook
  AFTER INSERT ON returnget FOR EACH ROW
    UPDATE textbook
SET textbook.stock = textbook.stock - 1 
WHERE textbook.textbook_ID = New.textbook_id ;

CREATE OR REPLACE DEFINER=`root`@`localhost` TRIGGER increment_textbook
  AFTER UPDATE ON returnget FOR EACH ROW
    UPDATE textbook
SET textbook.stock = textbook.stock + 1 
WHERE textbook.textbook_ID = New.textbook_id AND New.status_return=0;

CREATE OR REPLACE DEFINER=`root`@`localhost` TRIGGER increment_student
  AFTER INSERT ON student_class FOR EACH ROW
    UPDATE class
SET class.TOTALSTUDENTS = class.TOTALSTUDENTS + 1 
WHERE class.CLASS_ID = New.CLASS_ID ;


